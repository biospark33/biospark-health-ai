
> biospark-health-ai@1.0.0-phase1 test:coverage
> jest --coverage

PASS __tests__/memory/performance.test.ts
FAIL tests/phase1-integration.test.ts
  ● Test suite failed to run

    Missing OpenAI API key

       6 |
       7 | if (!process.env.OPENAI_API_KEY) {
    >  8 |   throw new Error('Missing OpenAI API key')
         |         ^
       9 | }
      10 |
      11 | const openai = new OpenAI({

      at Object.<anonymous> (lib/openai.ts:8:9)
      at Object.<anonymous> (lib/memory-enhanced-health-ai.ts:2760:27)
      at Object.<anonymous> (tests/phase1-integration.test.ts:14:33)

FAIL __tests__/memory/search.test.ts
  ● Zep Search Operations › semanticSearch › should perform semantic search successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      50 |       );
      51 |
    > 52 |       expect(result.success).toBe(true);
         |                              ^
      53 |       expect(result.data).toHaveLength(1);
      54 |       expect(result.data[0].content).toBe('Health analysis showing improved biomarkers');
      55 |       expect(result.data[0].score).toBe(0.95);

      at Object.toBe (__tests__/memory/search.test.ts:52:30)

  ● Zep Search Operations › semanticSearch › should handle search errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "Semantic search failed"
    Received string:    "Zep client not initialized"

      68 |
      69 |       expect(result.success).toBe(false);
    > 70 |       expect(result.error?.message).toContain('Semantic search failed');
         |                                     ^
      71 |     });
      72 |
      73 |     it('should handle missing Zep client', async () => {

      at Object.toContain (__tests__/memory/search.test.ts:70:37)

  ● Zep Search Operations › searchHealthAnalyses › should search for specific analysis types

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-session-456", ObjectContaining {"limit": 10, "metadata": ObjectContaining {"analysisType": "comprehensive", "type": "health_analysis", "userId": "test-user-123"}, "text": "health analysis biomarkers recommendations"}

    Number of calls: 0

       99 |       );
      100 |
    > 101 |       expect(zepClient.memory.search).toHaveBeenCalledWith(
          |                                       ^
      102 |         mockSessionId,
      103 |         expect.objectContaining({
      104 |           text: 'health analysis biomarkers recommendations',

      at Object.toHaveBeenCalledWith (__tests__/memory/search.test.ts:101:39)

  ● Zep Search Operations › findRelevantContext › should find context for current query

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      137 |       );
      138 |
    > 139 |       expect(result.success).toBe(true);
          |                              ^
      140 |       expect(zepClient.memory.search).toHaveBeenCalledWith(
      141 |         mockSessionId,
      142 |         expect.objectContaining({

      at Object.toBe (__tests__/memory/search.test.ts:139:30)

FAIL __tests__/memory/preferences.test.ts
  ● Zep Preferences Management › storePreferences › should store user preferences successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      49 |       const result = await storePreferences(mockUserId, mockSessionId, preferences);
      50 |
    > 51 |       expect(result.success).toBe(true);
         |                              ^
      52 |       expect(zepClient.memory.add).toHaveBeenCalledWith(
      53 |         mockSessionId,
      54 |         expect.objectContaining({

      at Object.toBe (__tests__/memory/preferences.test.ts:51:30)

  ● Zep Preferences Management › getPreferences › should retrieve user preferences successfully

    expect(received).toEqual(expected) // deep equality

    Expected: {"communicationStyle": "concise", "focusAreas": ["thyroid"], "healthGoals": ["energy_improvement"]}
    Received: null

      89 |
      90 |       expect(result.success).toBe(true);
    > 91 |       expect(result.data).toEqual(mockPreferences);
         |                           ^
      92 |     });
      93 |
      94 |     it('should return null when no preferences found', async () => {

      at Object.toEqual (__tests__/memory/preferences.test.ts:91:27)

  ● Zep Preferences Management › implicitLearn › should learn from positive user interactions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-session-456", ObjectContaining {"messages": ArrayContaining [ObjectContaining {"metadata": ObjectContaining {"action": "view_analysis", "response": "positive", "type": "implicit_learning"}}]}

    Number of calls: 0

      125 |
      126 |       expect(result.success).toBe(true);
    > 127 |       expect(zepClient.memory.add).toHaveBeenCalledWith(
          |                                    ^
      128 |         mockSessionId,
      129 |         expect.objectContaining({
      130 |           messages: expect.arrayContaining([

      at Object.toHaveBeenCalledWith (__tests__/memory/preferences.test.ts:127:36)

  ● Zep Preferences Management › getPersonalizedRecommendations › should generate recommendations based on preferences and learning

    expect(received).toContain(expected) // indexOf

    Expected value: "Continue focusing on thyroid based on your preferences"
    Received array: ["Set up your health goals to get personalized recommendations", "Complete a comprehensive analysis to establish your baseline", "Track your progress regularly for better insights"]

      167 |
      168 |       expect(result.success).toBe(true);
    > 169 |       expect(result.data).toContain('Continue focusing on thyroid based on your preferences');
          |                           ^
      170 |       expect(result.data).toContain('Continue focusing on metabolic based on your preferences');
      171 |     });
      172 |

      at Object.toContain (__tests__/memory/preferences.test.ts:169:27)

  ● Zep Preferences Management › getPersonalizedRecommendations › should provide default recommendations when no data available

    expect(received).toContain(expected) // indexOf

    Expected value: "Set up your health goals"
    Received array: ["Set up your health goals to get personalized recommendations", "Complete a comprehensive analysis to establish your baseline", "Track your progress regularly for better insights"]

      178 |
      179 |       expect(result.success).toBe(true);
    > 180 |       expect(result.data).toContain('Set up your health goals');
          |                           ^
      181 |       expect(result.data).toContain('Complete a comprehensive analysis');
      182 |     });
      183 |   });

      at Object.toContain (__tests__/memory/preferences.test.ts:180:27)

FAIL __tests__/memory/context.test.ts
  ● Zep Context Management › getIntelligentContext › should retrieve comprehensive health context

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      52 |       expect(result.success).toBe(true);
      53 |       expect(result.data?.userId).toBe(mockUserId);
    > 54 |       expect(result.data?.relevantHistory).toHaveLength(1);
         |                                            ^
      55 |       expect(result.data?.userPreferences.focusAreas).toContain('cardiovascular');
      56 |       expect(result.data?.healthGoals).toContain('Improve heart health');
      57 |     });

      at Object.toHaveLength (__tests__/memory/context.test.ts:54:44)

  ● Zep Context Management › getIntelligentContext › should handle context summarization for long content

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      76 |       );
      77 |
    > 78 |       expect(summarizeMemory).toHaveBeenCalled();
         |                               ^
      79 |       expect(result.data?.conversationSummary).toBe('Summarized content');
      80 |     });
      81 |   });

      at Object.toHaveBeenCalled (__tests__/memory/context.test.ts:78:31)

  ● Zep Context Management › updateConversationContext › should store conversation messages successfully

    TypeError: Cannot read properties of null (reading 'memory')

      84 |     it('should store conversation messages successfully', async () => {
      85 |       const { zepClient } = require('@/lib/zep/client');
    > 86 |       zepClient.memory.add = jest.fn().mockResolvedValue(true);
         |                 ^
      87 |
      88 |       const result = await updateConversationContext(
      89 |         mockUserId,

      at Object.memory (__tests__/memory/context.test.ts:86:17)

FAIL tests/zep.test.ts
  ● Console

    console.warn
      Zep client not available, generating session ID only

      21 | ): Promise<ZepOperationResult<string>> {
      22 |   if (!zepClient) {
    > 23 |     console.warn('Zep client not available, generating session ID only');
         |             ^
      24 |     const sessionId = generateSessionId(userId);
      25 |     return { success: true, data: sessionId };
      26 |   }

      at warn (lib/zep/sessions.ts:23:13)
      at Object.<anonymous> (tests/zep.test.ts:18:50)

    console.error
      Zep client not initialized

      42 | export async function testZepConnection(): Promise<boolean> {
      43 |   if (!zepClient) {
    > 44 |     console.error('Zep client not initialized');
         |             ^
      45 |     return false;
      46 |   }
      47 |

      at error (lib/zep/client.ts:44:13)
      at Object.<anonymous> (tests/zep.test.ts:29:48)

    console.warn
      Zep client not available, generating session ID only

      21 | ): Promise<ZepOperationResult<string>> {
      22 |   if (!zepClient) {
    > 23 |     console.warn('Zep client not available, generating session ID only');
         |             ^
      24 |     const sessionId = generateSessionId(userId);
      25 |     return { success: true, data: sessionId };
      26 |   }

      at warn (lib/zep/sessions.ts:23:13)
      at Object.<anonymous> (tests/zep.test.ts:34:43)

    console.error
      Zep operation failed: TypeError: Cannot read properties of null (reading 'memory')
          at memory (/home/ubuntu/biospark-health-ai/lib/zep/sessions.ts:48:38)
          at operation (/home/ubuntu/biospark-health-ai/lib/zep/client.ts:66:18)
          at getUserSession (/home/ubuntu/biospark-health-ai/lib/zep/sessions.ts:46:30)
          at getUserSession (/home/ubuntu/biospark-health-ai/lib/zep/sessions.ts:71:33)
          at Object.<anonymous> (/home/ubuntu/biospark-health-ai/tests/zep.test.ts:41:48)
          at Promise.then.completed (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:444:34)
          at Object.worker (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/testWorker.js:106:12)

      66 |     return await operation();
      67 |   } catch (error) {
    > 68 |     console.error('Zep operation failed:', error);
         |             ^
      69 |     if (fallback !== undefined) {
      70 |       return fallback;
      71 |     }

      at error (lib/zep/client.ts:68:13)

    console.warn
      Zep client not available, skipping memory storage

      29 | ): Promise<ZepOperationResult<boolean>> {
      30 |   if (!zepClient) {
    > 31 |     console.warn('Zep client not available, skipping memory storage');
         |             ^
      32 |     return { success: false, error: { code: 'CLIENT_NOT_AVAILABLE', message: 'Zep client not initialized', timestamp: new Date() } };
      33 |   }
      34 |

      at warn (lib/zep/memory.ts:31:13)
      at Object.<anonymous> (tests/zep.test.ts:72:47)

    console.log
      Test cleanup completed

      at Object.log (tests/zep.test.ts:87:13)

  ● Zep Memory Integration › Zep API connectivity

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      28 |   test('Zep API connectivity', async () => {
      29 |     const isConnected = await testZepConnection();
    > 30 |     expect(isConnected).toBe(true);
         |                         ^
      31 |   }, 10000);
      32 |
      33 |   test('Create user session', async () => {

      at Object.toBe (tests/zep.test.ts:30:25)

  ● Zep Memory Integration › Get or create user session

    TypeError: Cannot read properties of null (reading 'success')

      71 |   const existingSession = await getUserSession(userId);
      72 |   
    > 73 |   if (existingSession.success && existingSession.data) {
         |                       ^
      74 |     return { success: true, data: existingSession.data };
      75 |   }
      76 |

      at success (lib/zep/sessions.ts:73:23)
      at Object.<anonymous> (tests/zep.test.ts:41:20)

  ● Zep Memory Integration › Store health analysis in memory

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      71 |     if (testSessionId) {
      72 |       const result = await storeHealthAnalysis(testUserId, testSessionId, mockAnalysis);
    > 73 |       expect(result.success).toBe(true);
         |                              ^
      74 |     }
      75 |   }, 15000);
      76 |

      at Object.toBe (tests/zep.test.ts:73:30)

  ● Zep Memory Integration › Retrieve health context from memory

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      79 |       const result = await getHealthContext(testUserId, testSessionId, 'glucose diabetes');
      80 |       expect(result.success).toBe(true);
    > 81 |       expect(Array.isArray(result.data)).toBe(true);
         |                                          ^
      82 |     }
      83 |   }, 10000);
      84 |

      at Object.toBe (tests/zep.test.ts:81:42)

FAIL __tests__/zep-integration.test.ts
  ● Zep Integration Tests › ZepClient › should create user session successfully

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › ZepClient › should store health analysis memory with encryption

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › ZepClient › should retrieve relevant context

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › ZepClient › should test connection successfully

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › MemoryManager › should store health analysis with HIPAA compliance

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › MemoryManager › should retrieve relevant memory context

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › MemoryManager › should create or get user session

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › MemoryManager › should get user health journey

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › SessionManager › should create user session

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › SessionManager › should get active session

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › SessionManager › should validate session

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › SessionManager › should cleanup expired sessions

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › SessionManager › should get session statistics

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › HIPAA Compliance › should encrypt and decrypt PHI data

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › HIPAA Compliance › should validate HIPAA compliance

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › Error Handling › should handle Zep API errors gracefully

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › Error Handling › should handle network timeouts

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › Performance › should handle large memory contexts efficiently

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Zep Integration Tests › Performance › should handle concurrent session operations

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:20:22)

  ● Full Zep Integration Workflow › should complete full health analysis memory workflow

    HIPAA VIOLATION: Encryption key required for session security

      39 |     this.encryptionKey = process.env.ZEP_ENCRYPTION_KEY || '';
      40 |     if (!this.encryptionKey) {
    > 41 |       throw new Error('HIPAA VIOLATION: Encryption key required for session security');
         |             ^
      42 |     }
      43 |   }
      44 |   

      at new SessionManager (lib/session-manager.ts:41:13)
      at Object.<anonymous> (__tests__/zep-integration.test.ts:294:28)

-----------------------------------------|---------|----------|---------|---------|---------------------------------------------
File                                     | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                           
-----------------------------------------|---------|----------|---------|---------|---------------------------------------------
All files                                |    5.04 |     3.14 |    5.83 |    5.22 |                                             
 app                                     |       0 |      100 |       0 |       0 |                                             
  layout.tsx                             |       0 |      100 |       0 |       0 | 1-7                                         
  page.tsx                               |       0 |      100 |       0 |       0 | 5-196                                       
 app/admin/compliance                    |       0 |        0 |       0 |       0 |                                             
  page.tsx                               |       0 |        0 |       0 |       0 | 7-442                                       
 app/api/analysis/[id]                   |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 2-66                                        
 app/api/auth/[...nextauth]              |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 2-75                                        
 app/api/auth/signup                     |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 2-105                                       
 app/api/chat/memory-enhanced            |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 6-196                                       
 app/api/compliance/audit-logs           |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-174                                       
 app/api/compliance/metrics              |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-259                                       
 app/api/comprehensive-analysis          |       0 |        0 |       0 |       0 |                                             
  route-optimized.ts                     |       0 |        0 |       0 |       0 | 5-180                                       
  route.ts                               |       0 |        0 |       0 |       0 | 2-398                                       
 app/api/consent                         |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-229                                       
 app/api/consent/validate                |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-78                                        
 app/api/health                          |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-46                                        
 app/api/health/engagement-tracking      |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-284                                       
 app/api/health/memory-enhanced-analysis |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-199                                       
 app/api/memory/cleanup                  |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-80                                        
 app/api/memory/context                  |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-69                                        
 app/api/memory/history                  |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-77                                        
 app/api/memory/insights                 |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-75                                        
 app/api/memory/preferences              |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-95                                        
 app/api/memory/trends                   |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 7-85                                        
 app/api/performance/metrics             |       0 |        0 |       0 |       0 |                                             
  route.ts                               |       0 |        0 |       0 |       0 | 5-42                                        
 app/dashboard                           |       0 |      100 |       0 |       0 |                                             
  page.tsx                               |       0 |      100 |       0 |       0 | 4-329                                       
 lib                                     |    1.93 |     2.03 |    1.32 |       2 |                                             
  abacus.ts                              |       0 |        0 |       0 |       0 | 14-195                                      
  audit.ts                               |       0 |        0 |       0 |       0 | 6-368                                       
  auth.ts                                |       0 |        0 |       0 |       0 | 6-68                                        
  biomarker-analysis.ts                  |       0 |        0 |       0 |       0 | 5-486                                       
  cache.ts                               |       0 |        0 |       0 |       0 | 11-205                                      
  consent.ts                             |       0 |        0 |       0 |       0 | 28-312                                      
  crypto.ts                              |       0 |        0 |       0 |       0 | 7-421                                       
  db-optimized.ts                        |       0 |        0 |       0 |       0 | 5-192                                       
  db.ts                                  |       0 |        0 |     100 |       0 | 3-13                                        
  enhanced-biomarker-analysis.ts         |       0 |        0 |       0 |       0 | 7-284                                       
  environment-validator.ts               |       0 |        0 |       0 |       0 | 42-258                                      
  input-validation.ts                    |       0 |        0 |       0 |       0 | 13-201                                      
  memory-enhanced-health-ai.ts           |       0 |        0 |       0 |       0 | 5-379                                       
  memory-manager.ts                      |    5.68 |    14.28 |    5.26 |    5.81 | 51-364                                      
  openai.ts                              |       0 |        0 |       0 |       0 | 5-182                                       
  prisma.ts                              |   63.63 |     62.5 |       0 |   77.77 | 19-20                                       
  ray-peat-integration.ts                |       0 |        0 |       0 |       0 | 10-292                                      
  rbac.ts                                |       0 |        0 |       0 |       0 | 6-278                                       
  session-manager.ts                     |      16 |    13.63 |   14.28 |   16.32 | 58-317                                      
  supabase.ts                            |       0 |        0 |       0 |       0 | 5-86                                        
  utils.ts                               |       0 |      100 |       0 |       0 | 1-13                                        
  zep-client.ts                          |    9.37 |     5.66 |      10 |     8.8 | 44-64,73-312,327-338                        
 lib/cache                               |    64.7 |    55.55 |      50 |   63.63 |                                             
  memory-cache.ts                        |    64.7 |    55.55 |      50 |   63.63 | 43-45,60,85-86,117-132                      
 lib/compliance                          |       0 |        0 |       0 |       0 |                                             
  audit.ts                               |       0 |        0 |       0 |       0 | 7-88                                        
  hipaa.ts                               |       0 |        0 |       0 |       0 | 7-108                                       
  index.ts                               |       0 |      100 |     100 |       0 | 7-8                                         
 lib/zep                                 |   19.05 |     9.81 |   19.62 |   19.63 |                                             
  analytics.ts                           |    1.14 |        0 |       0 |    1.23 | 13-214                                      
  client.ts                              |      50 |       25 |   66.66 |   48.48 | 18-30,36,48-56,70                           
  context.ts                             |   42.22 |    28.12 |   28.57 |   43.18 | 51,59-62,71,78-82,93-155                    
  index.ts                               |       0 |      100 |     100 |       0 | 8-43                                        
  memory.ts                              |   14.85 |     4.22 |   16.66 |   14.85 | 35-80,102-381                               
  preferences.ts                         |   42.37 |       25 |   46.15 |    43.1 | 22-39,55-74,114-124,129-159,192-193,199-205 
  search.ts                              |   66.66 |       20 |      60 |      70 | 25-45                                       
  sessions.ts                            |   25.45 |    23.52 |   33.33 |   25.45 | 11,28-43,53-61,74-144                       
  summarize.ts                           |    5.33 |        0 |       0 |    5.63 | 19-74,87-143,155-184                        
  utils.ts                               |       0 |        0 |       0 |       0 | 10-181                                      
-----------------------------------------|---------|----------|---------|---------|---------------------------------------------
Test Suites: 6 failed, 1 passed, 7 total
Tests:       36 failed, 11 passed, 47 total
Snapshots:   0 total
Time:        7.953 s
Ran all test suites.
