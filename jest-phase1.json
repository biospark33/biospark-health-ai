{"numFailedTestSuites":6,"numFailedTests":16,"numPassedTestSuites":1,"numPassedTests":46,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":7,"numTotalTests":62,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1753378147471,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should create user session successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create user session successfully"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should store health analysis memory with encryption","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store health analysis memory with encryption"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should retrieve relevant context","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should retrieve relevant context"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should test connection successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should test connection successfully"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should store health analysis with HIPAA compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store health analysis with HIPAA compliance"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).toHaveProperty(path)\n\nExpected path: \"relevantAnalyses\"\nReceived path: []\n\nReceived value: {\"conversationHistory\": [], \"healthJourney\": [], \"relevantMemories\": [], \"sessionId\": \"test-session-123\", \"userPreferences\": {}}","pass":false}}],"failureMessages":["Error: expect(received).toHaveProperty(path)\n\nExpected path: \"relevantAnalyses\"\nReceived path: []\n\nReceived value: {\"conversationHistory\": [], \"healthJourney\": [], \"relevantMemories\": [], \"sessionId\": \"test-session-123\", \"userPreferences\": {}}\n    at Object.toHaveProperty (/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts:102:23)"],"fullName":"Zep Integration Tests MemoryManager should retrieve relevant memory context","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should retrieve relevant memory context"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should create or get user session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create or get user session"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should get user health journey","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get user health journey"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should create user session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create user session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should get active session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should get active session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should validate session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should cleanup expired sessions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup expired sessions"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should get session statistics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get session statistics"},{"ancestorTitles":["Zep Integration Tests","HIPAA Compliance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests HIPAA Compliance should encrypt and decrypt PHI data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should encrypt and decrypt PHI data"},{"ancestorTitles":["Zep Integration Tests","HIPAA Compliance"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests HIPAA Compliance should validate HIPAA compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate HIPAA compliance"},{"ancestorTitles":["Zep Integration Tests","Error Handling"],"duration":3,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"createdAt\": 2025-07-24T17:29:08.237Z, \"expiresAt\": 2025-07-25T17:29:08.237Z, \"id\": \"session-test-user-123-1753378148237\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_6214e5137017257a\", \"userId\": \"test-user-123\"}"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"createdAt\": 2025-07-24T17:29:08.237Z, \"expiresAt\": 2025-07-25T17:29:08.237Z, \"id\": \"session-test-user-123-1753378148237\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_6214e5137017257a\", \"userId\": \"test-user-123\"}\n    at expect (/home/ubuntu/biospark-health-ai/node_modules/expect/build/index.js:113:15)\n    at Object.expect (/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts:250:13)\n    at Promise.then.completed (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"Zep Integration Tests Error Handling should handle Zep API errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle Zep API errors gracefully"},{"ancestorTitles":["Zep Integration Tests","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Error Handling should handle network timeouts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network timeouts"},{"ancestorTitles":["Zep Integration Tests","Performance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Performance should handle large memory contexts efficiently","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle large memory contexts efficiently"},{"ancestorTitles":["Zep Integration Tests","Performance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Performance should handle concurrent session operations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle concurrent session operations"},{"ancestorTitles":["Full Zep Integration Workflow"],"duration":1,"failureDetails":[{}],"failureMessages":["Error: Failed to store health analysis: TypeError: Cannot read properties of undefined (reading 'storeHealthAnalysisMemory')\n    at MemoryManager.storeHealthAnalysis (/home/ubuntu/biospark-health-ai/lib/memory-manager.ts:57:13)\n    at Object.storeHealthAnalysis (/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts:340:25)"],"fullName":"Full Zep Integration Workflow should complete full health analysis memory workflow","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should complete full health analysis memory workflow"}],"endTime":1753378148260,"message":"  ● Zep Integration Tests › MemoryManager › should retrieve relevant memory context\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"relevantAnalyses\"\n    Received path: []\n\n    Received value: {\"conversationHistory\": [], \"healthJourney\": [], \"relevantMemories\": [], \"sessionId\": \"test-session-123\", \"userPreferences\": {}}\n\n      100 |       const context = await memoryManager.getRelevantContext(sessionId, query, userId);\n      101 |       \n    > 102 |       expect(context).toHaveProperty('relevantAnalyses');\n          |                       ^\n      103 |       expect(context).toHaveProperty('conversationHistory');\n      104 |       expect(context).toHaveProperty('userPreferences');\n      105 |       expect(context).toHaveProperty('healthGoals');\n\n      at Object.toHaveProperty (__tests__/zep-integration.test.ts:102:23)\n\n  ● Zep Integration Tests › Error Handling › should handle Zep API errors gracefully\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"createdAt\": 2025-07-24T17:29:08.237Z, \"expiresAt\": 2025-07-25T17:29:08.237Z, \"id\": \"session-test-user-123-1753378148237\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_6214e5137017257a\", \"userId\": \"test-user-123\"}\n\n      248 |       }));\n      249 |\n    > 250 |       await expect(\n          |             ^\n      251 |         sessionManagerWithFailingPrisma.createUserSession('test-user-123')\n      252 |       ).rejects.toThrow('Failed to create user session');\n      253 |     });\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (__tests__/zep-integration.test.ts:250:13)\n\n  ● Full Zep Integration Workflow › should complete full health analysis memory workflow\n\n    Failed to store health analysis: TypeError: Cannot read properties of undefined (reading 'storeHealthAnalysisMemory')\n\n      55 |     } catch (error) {\n      56 |       console.error(\"❌ Failed to store health analysis:\", error);\n    > 57 |       throw new Error(`Failed to store health analysis: ${error}`);\n         |             ^\n      58 |     }\n      59 |   }\n      60 |\n\n      at MemoryManager.storeHealthAnalysis (lib/memory-manager.ts:57:13)\n      at Object.storeHealthAnalysis (__tests__/zep-integration.test.ts:340:25)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts","startTime":1753378147594,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Memory Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Zep API connectivity","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"Zep API connectivity"},{"ancestorTitles":["Zep Memory Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Create user session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"Create user session"},{"ancestorTitles":["Zep Memory Integration"],"duration":9,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at success (/home/ubuntu/biospark-health-ai/lib/zep/sessions.ts:73:23)\n    at Object.<anonymous> (/home/ubuntu/biospark-health-ai/tests/zep.test.ts:41:20)"],"fullName":"Zep Memory Integration Get or create user session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"Get or create user session"},{"ancestorTitles":["Zep Memory Integration"],"duration":5,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/tests/zep.test.ts:73:21)"],"fullName":"Zep Memory Integration Store health analysis in memory","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"Store health analysis in memory"},{"ancestorTitles":["Zep Memory Integration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Retrieve health context from memory","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"Retrieve health context from memory"}],"endTime":1753378148646,"message":"  ● Zep Memory Integration › Get or create user session\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      71 |   const existingSession = await getUserSession(userId);\n      72 |   \n    > 73 |   if (existingSession.success && existingSession.data) {\n         |                       ^\n      74 |     return { success: true, data: existingSession.data };\n      75 |   }\n      76 |\n\n      at success (lib/zep/sessions.ts:73:23)\n      at Object.<anonymous> (tests/zep.test.ts:41:20)\n\n  ● Zep Memory Integration › Store health analysis in memory\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      71 |     if (testSessionId) {\n      72 |       const result = await storeHealthAnalysis(testUserId, testSessionId, mockAnalysis);\n    > 73 |       expect(result.success).toBe(true);\n         |                     ^\n      74 |     }\n      75 |   }, 15000);\n      76 |\n\n      at Object.success (tests/zep.test.ts:73:21)\n","name":"/home/ubuntu/biospark-health-ai/tests/zep.test.ts","startTime":1753378148295,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Context Management","getIntelligentContext"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Context Management getIntelligentContext should retrieve comprehensive health context","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should retrieve comprehensive health context"},{"ancestorTitles":["Zep Context Management","getIntelligentContext"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Context Management getIntelligentContext should handle context summarization for long content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle context summarization for long content"},{"ancestorTitles":["Zep Context Management","updateConversationContext"],"duration":11,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts:96:21)"],"fullName":"Zep Context Management updateConversationContext should store conversation messages successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should store conversation messages successfully"}],"endTime":1753378148985,"message":"  ● Zep Context Management › updateConversationContext › should store conversation messages successfully\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      94 |       );\n      95 |\n    > 96 |       expect(result.success).toBe(true);\n         |                     ^\n      97 |       expect(zepClient.memory.add).toHaveBeenCalledWith(\n      98 |         mockSessionId,\n      99 |         expect.objectContaining({\n\n      at Object.success (__tests__/memory/context.test.ts:96:21)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts","startTime":1753378148655,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Search Operations","semanticSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Search Operations semanticSearch should perform semantic search successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should perform semantic search successfully"},{"ancestorTitles":["Zep Search Operations","semanticSearch"],"duration":1,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts:80:30)"],"fullName":"Zep Search Operations semanticSearch should handle search errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle search errors gracefully"},{"ancestorTitles":["Zep Search Operations","semanticSearch"],"duration":0,"failureDetails":[{"matcherResult":{"actual":true,"expected":false,"message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.toBe (/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts:95:30)"],"fullName":"Zep Search Operations semanticSearch should handle missing Zep client","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle missing Zep client"},{"ancestorTitles":["Zep Search Operations","searchHealthAnalyses"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"limit\": 10, \"metadata\": ObjectContaining {\"analysisType\": \"comprehensive\", \"type\": \"health_analysis\", \"userId\": \"test-user-123\"}, \"text\": \"health analysis biomarkers recommendations\"}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"limit\": 10, \"metadata\": ObjectContaining {\"analysisType\": \"comprehensive\", \"type\": \"health_analysis\", \"userId\": \"test-user-123\"}, \"text\": \"health analysis biomarkers recommendations\"}\n\nNumber of calls: 0\n    at Object.toHaveBeenCalledWith (/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts:113:26)"],"fullName":"Zep Search Operations searchHealthAnalyses should search for specific analysis types","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should search for specific analysis types"},{"ancestorTitles":["Zep Search Operations","findRelevantContext"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"limit\": 5, \"metadata\": ObjectContaining {\"type\": {\"$in\": [\"health_analysis\", \"preferences\", \"goals\"]}, \"userId\": \"test-user-123\"}, \"text\": \"blood pressure concerns\"}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"limit\": 5, \"metadata\": ObjectContaining {\"type\": {\"$in\": [\"health_analysis\", \"preferences\", \"goals\"]}, \"userId\": \"test-user-123\"}, \"text\": \"blood pressure concerns\"}\n\nNumber of calls: 0\n    at Object.toHaveBeenCalledWith (/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts:152:26)"],"fullName":"Zep Search Operations findRelevantContext should find context for current query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should find context for current query"}],"endTime":1753378149271,"message":"  ● Zep Search Operations › semanticSearch › should handle search errors gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      78 |       );\n      79 |\n    > 80 |       expect(result.success).toBe(false);\n         |                              ^\n      81 |       expect(result.error?.code).toBe('CLIENT_NOT_AVAILABLE');\n      82 |     });\n      83 |\n\n      at Object.toBe (__tests__/memory/search.test.ts:80:30)\n\n  ● Zep Search Operations › semanticSearch › should handle missing Zep client\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      93 |       );\n      94 |\n    > 95 |       expect(result.success).toBe(false);\n         |                              ^\n      96 |       expect(result.error?.message).toContain('Semantic search failed');\n      97 |     });\n      98 |   });\n\n      at Object.toBe (__tests__/memory/search.test.ts:95:30)\n\n  ● Zep Search Operations › searchHealthAnalyses › should search for specific analysis types\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"test-session-456\", ObjectContaining {\"limit\": 10, \"metadata\": ObjectContaining {\"analysisType\": \"comprehensive\", \"type\": \"health_analysis\", \"userId\": \"test-user-123\"}, \"text\": \"health analysis biomarkers recommendations\"}\n\n    Number of calls: 0\n\n      111 |\n      112 |       // The function calls semanticSearch internally, so we check the mock was called\n    > 113 |       expect(mockSearch).toHaveBeenCalledWith(\n          |                          ^\n      114 |         mockSessionId,\n      115 |         expect.objectContaining({\n      116 |           text: 'health analysis biomarkers recommendations',\n\n      at Object.toHaveBeenCalledWith (__tests__/memory/search.test.ts:113:26)\n\n  ● Zep Search Operations › findRelevantContext › should find context for current query\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"test-session-456\", ObjectContaining {\"limit\": 5, \"metadata\": ObjectContaining {\"type\": {\"$in\": [\"health_analysis\", \"preferences\", \"goals\"]}, \"userId\": \"test-user-123\"}, \"text\": \"blood pressure concerns\"}\n\n    Number of calls: 0\n\n      150 |\n      151 |       expect(result.success).toBe(true);\n    > 152 |       expect(mockSearch).toHaveBeenCalledWith(\n          |                          ^\n      153 |         mockSessionId,\n      154 |         expect.objectContaining({\n      155 |           text: 'blood pressure concerns',\n\n      at Object.toHaveBeenCalledWith (__tests__/memory/search.test.ts:152:26)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts","startTime":1753378148995,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Preferences Management","storePreferences"],"duration":13,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts:51:21)"],"fullName":"Zep Preferences Management storePreferences should store user preferences successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should store user preferences successfully"},{"ancestorTitles":["Zep Preferences Management","getPreferences"],"duration":3,"failureDetails":[{"matcherResult":{"actual":null,"expected":{"healthGoals":["energy_improvement"],"focusAreas":["thyroid"],"communicationStyle":"concise"},"message":"expect(received).toEqual(expected) // deep equality\n\nExpected: {\"communicationStyle\": \"concise\", \"focusAreas\": [\"thyroid\"], \"healthGoals\": [\"energy_improvement\"]}\nReceived: null","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"communicationStyle\": \"concise\", \"focusAreas\": [\"thyroid\"], \"healthGoals\": [\"energy_improvement\"]}\nReceived: null\n    at Object.toEqual (/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts:91:27)"],"fullName":"Zep Preferences Management getPreferences should retrieve user preferences successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should retrieve user preferences successfully"},{"ancestorTitles":["Zep Preferences Management","getPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Preferences Management getPreferences should return null when no preferences found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null when no preferences found"},{"ancestorTitles":["Zep Preferences Management","implicitLearn"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts:126:21)"],"fullName":"Zep Preferences Management implicitLearn should learn from positive user interactions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should learn from positive user interactions"},{"ancestorTitles":["Zep Preferences Management","getPersonalizedRecommendations"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts:168:21)"],"fullName":"Zep Preferences Management getPersonalizedRecommendations should generate recommendations based on preferences and learning","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should generate recommendations based on preferences and learning"},{"ancestorTitles":["Zep Preferences Management","getPersonalizedRecommendations"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of null (reading 'success')\n    at Object.success (/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts:179:21)"],"fullName":"Zep Preferences Management getPersonalizedRecommendations should provide default recommendations when no data available","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide default recommendations when no data available"}],"endTime":1753378149613,"message":"  ● Zep Preferences Management › storePreferences › should store user preferences successfully\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      49 |       const result = await storePreferences(mockUserId, mockSessionId, preferences);\n      50 |\n    > 51 |       expect(result.success).toBe(true);\n         |                     ^\n      52 |       expect(zepClient.memory.add).toHaveBeenCalledWith(\n      53 |         mockSessionId,\n      54 |         expect.objectContaining({\n\n      at Object.success (__tests__/memory/preferences.test.ts:51:21)\n\n  ● Zep Preferences Management › getPreferences › should retrieve user preferences successfully\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: {\"communicationStyle\": \"concise\", \"focusAreas\": [\"thyroid\"], \"healthGoals\": [\"energy_improvement\"]}\n    Received: null\n\n      89 |\n      90 |       expect(result.success).toBe(true);\n    > 91 |       expect(result.data).toEqual(mockPreferences);\n         |                           ^\n      92 |     });\n      93 |\n      94 |     it('should return null when no preferences found', async () => {\n\n      at Object.toEqual (__tests__/memory/preferences.test.ts:91:27)\n\n  ● Zep Preferences Management › implicitLearn › should learn from positive user interactions\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      124 |       const result = await implicitLearn(mockUserId, mockSessionId, interaction);\n      125 |\n    > 126 |       expect(result.success).toBe(true);\n          |                     ^\n      127 |       expect(zepClient.memory.add).toHaveBeenCalledWith(\n      128 |         mockSessionId,\n      129 |         expect.objectContaining({\n\n      at Object.success (__tests__/memory/preferences.test.ts:126:21)\n\n  ● Zep Preferences Management › getPersonalizedRecommendations › should generate recommendations based on preferences and learning\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      166 |       const result = await getPersonalizedRecommendations(mockUserId, mockSessionId);\n      167 |\n    > 168 |       expect(result.success).toBe(true);\n          |                     ^\n      169 |       expect(result.data).toContain('Continue focusing on thyroid based on your preferences');\n      170 |       expect(result.data).toContain('Continue focusing on metabolic based on your preferences');\n      171 |     });\n\n      at Object.success (__tests__/memory/preferences.test.ts:168:21)\n\n  ● Zep Preferences Management › getPersonalizedRecommendations › should provide default recommendations when no data available\n\n    TypeError: Cannot read properties of null (reading 'success')\n\n      177 |       const result = await getPersonalizedRecommendations(mockUserId, mockSessionId);\n      178 |\n    > 179 |       expect(result.success).toBe(true);\n          |                     ^\n      180 |       expect(result.data.some((item: string) => item.includes('Set up your health goals'))).toBe(true);\n      181 |       expect(result.data.some((item: string) => item.includes('Complete a comprehensive analysis'))).toBe(true);\n      182 |     });\n\n      at Object.success (__tests__/memory/preferences.test.ts:179:21)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts","startTime":1753378149275,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should cache and retrieve data correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache and retrieve data correctly"},{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":151,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should respect TTL and expire data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect TTL and expire data"},{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should implement LRU eviction when cache is full","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should implement LRU eviction when cache is full"},{"ancestorTitles":["Memory Performance & Caching","withCache wrapper"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching withCache wrapper should cache operation results","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should cache operation results"},{"ancestorTitles":["Memory Performance & Caching","withCache wrapper"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching withCache wrapper should handle operation failures gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle operation failures gracefully"},{"ancestorTitles":["Memory Performance & Caching","Performance Requirements"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Performance Requirements should meet <50ms response time requirement for cached operations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should meet <50ms response time requirement for cached operations"},{"ancestorTitles":["Memory Performance & Caching","Performance Requirements"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Performance Requirements should handle concurrent cache operations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should handle concurrent cache operations"},{"ancestorTitles":["Memory Performance & Caching","Cache Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Cache Statistics should provide cache statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide cache statistics"}],"endTime":1753378150080,"message":"","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/performance.test.ts","startTime":1753378149627,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":14,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:168:56)"],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should generate memory-aware insights successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"failed","title":"should generate memory-aware insights successfully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should handle memory retrieval failures gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle memory retrieval failures gracefully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should analyze engagement patterns correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze engagement patterns correctly"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Progressive Disclosure Integration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Progressive Disclosure Integration should track layer navigation correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track layer navigation correctly"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Progressive Disclosure Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Progressive Disclosure Integration should calculate engagement scores accurately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate engagement scores accurately"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory Personalization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory Personalization should generate personalized insights based on user history","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate personalized insights based on user history"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory Personalization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory Personalization should predict engagement patterns accurately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should predict engagement patterns accurately"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Database Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Database Integration should create health assessment with memory enhancement","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create health assessment with memory enhancement"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Database Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Database Integration should update user memory preferences automatically","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update user memory preferences automatically"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","API Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests API Integration should handle memory-enhanced analysis API requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle memory-enhanced analysis API requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","API Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests API Integration should handle engagement tracking API requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle engagement tracking API requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Error Handling & Resilience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Error Handling & Resilience should handle Zep API failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Zep API failures gracefully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Error Handling & Resilience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Error Handling & Resilience should provide fallback when memory enhancement fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide fallback when memory enhancement fails"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Performance & Scalability"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Performance & Scalability should handle concurrent analysis requests","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle concurrent analysis requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Performance & Scalability"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Performance & Scalability should limit memory search results appropriately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should limit memory search results appropriately"}],"endTime":1753378150385,"message":"  ● BMAD Phase 1 Integration Tests › Memory-Enhanced Health Analysis › should generate memory-aware insights successfully\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      166 |       // Verify memory context has expected structure\n      167 |       expect(result.memoryContext.userId).toBe(userId);\n    > 168 |       expect(result.memoryContext.previousAssessments).toBeDefined();\n          |                                                        ^\n      169 |       expect(result.memoryContext.engagementPatterns).toBeDefined();\n      170 |       expect(result.memoryContext.preferences).toBeDefined();\n      171 |       expect(result.memoryContext.healthGoals).toBeDefined();\n\n      at Object.toBeDefined (tests/phase1-integration.test.ts:168:56)\n","name":"/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts","startTime":1753378150084,"status":"failed","summary":""}],"wasInterrupted":false}
