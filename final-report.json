{"numFailedTestSuites":6,"numFailedTests":10,"numPassedTestSuites":1,"numPassedTests":41,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":7,"numTotalTests":51,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1753379740464,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should create user session successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create user session successfully"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should store health analysis memory with encryption","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store health analysis memory with encryption"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should retrieve relevant context","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should retrieve relevant context"},{"ancestorTitles":["Zep Integration Tests","ZepClient"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests ZepClient should test connection successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should test connection successfully"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should store health analysis with HIPAA compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store health analysis with HIPAA compliance"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should retrieve relevant memory context","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should retrieve relevant memory context"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should create or get user session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create or get user session"},{"ancestorTitles":["Zep Integration Tests","MemoryManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests MemoryManager should get user health journey","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get user health journey"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should create user session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create user session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should get active session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get active session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should validate session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate session"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should cleanup expired sessions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup expired sessions"},{"ancestorTitles":["Zep Integration Tests","SessionManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests SessionManager should get session statistics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get session statistics"},{"ancestorTitles":["Zep Integration Tests","HIPAA Compliance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests HIPAA Compliance should encrypt and decrypt PHI data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should encrypt and decrypt PHI data"},{"ancestorTitles":["Zep Integration Tests","HIPAA Compliance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests HIPAA Compliance should validate HIPAA compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate HIPAA compliance"},{"ancestorTitles":["Zep Integration Tests","Error Handling"],"duration":2,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"createdAt\": 2025-07-24T17:55:41.011Z, \"expiresAt\": 2025-07-25T17:55:41.011Z, \"id\": \"session-test-user-123-1753379741011\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_3r5vess55yqmdhp0ytv\", \"userId\": \"test-user-123\"}"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"createdAt\": 2025-07-24T17:55:41.011Z, \"expiresAt\": 2025-07-25T17:55:41.011Z, \"id\": \"session-test-user-123-1753379741011\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_3r5vess55yqmdhp0ytv\", \"userId\": \"test-user-123\"}\n    at expect (/home/ubuntu/biospark-health-ai/node_modules/expect/build/index.js:113:15)\n    at Object.expect (/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts:228:13)\n    at Promise.then.completed (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"Zep Integration Tests Error Handling should handle Zep API errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle Zep API errors gracefully"},{"ancestorTitles":["Zep Integration Tests","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Error Handling should handle network timeouts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network timeouts"},{"ancestorTitles":["Zep Integration Tests","Performance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Performance should handle large memory contexts efficiently","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle large memory contexts efficiently"},{"ancestorTitles":["Zep Integration Tests","Performance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Integration Tests Performance should handle concurrent session operations","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should handle concurrent session operations"},{"ancestorTitles":["Full Zep Integration Workflow"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Full Zep Integration Workflow should complete full health analysis memory workflow","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should complete full health analysis memory workflow"}],"endTime":1753379741044,"message":"  ● Zep Integration Tests › Error Handling › should handle Zep API errors gracefully\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"createdAt\": 2025-07-24T17:55:41.011Z, \"expiresAt\": 2025-07-25T17:55:41.011Z, \"id\": \"session-test-user-123-1753379741011\", \"isActive\": true, \"metadata\": {}, \"sessionId\": \"labinsight_session_test-user-123_3r5vess55yqmdhp0ytv\", \"userId\": \"test-user-123\"}\n\n      226 |       const sessionManagerWithFailingPrisma = new SessionManager(zepClient);\n      227 |\n    > 228 |       await expect(\n          |             ^\n      229 |         sessionManagerWithFailingPrisma.createUserSession('test-user-123')\n      230 |       ).rejects.toThrow('Failed to create user session');\n      231 |       \n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (__tests__/zep-integration.test.ts:228:13)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/zep-integration.test.ts","startTime":1753379740537,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":19,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:160:39)"],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should generate memory-aware insights successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should generate memory-aware insights successfully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:196:39)"],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should handle memory retrieval failures gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle memory retrieval failures gracefully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory-Enhanced Health Analysis"],"duration":2,"failureDetails":[{"matcherResult":{"expected":[3,1,2],"message":"expect(received).toEqual(expected) // deep equality\n\nExpected: [3, 1, 2]\nReceived: undefined","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [3, 1, 2]\nReceived: undefined\n    at Object.toEqual (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:232:40)\n    at Promise.then.completed (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/ubuntu/biospark-health-ai/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/ubuntu/biospark-health-ai/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"BMAD Phase 1 Integration Tests Memory-Enhanced Health Analysis should analyze engagement patterns correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should analyze engagement patterns correctly"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Progressive Disclosure Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Progressive Disclosure Integration should track layer navigation correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track layer navigation correctly"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Progressive Disclosure Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Progressive Disclosure Integration should calculate engagement scores accurately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate engagement scores accurately"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory Personalization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory Personalization should generate personalized insights based on user history","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate personalized insights based on user history"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Memory Personalization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Memory Personalization should predict engagement patterns accurately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should predict engagement patterns accurately"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Database Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Database Integration should create health assessment with memory enhancement","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create health assessment with memory enhancement"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Database Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Database Integration should update user memory preferences automatically","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update user memory preferences automatically"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","API Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests API Integration should handle memory-enhanced analysis API requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle memory-enhanced analysis API requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","API Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests API Integration should handle engagement tracking API requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle engagement tracking API requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Error Handling & Resilience"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Error Handling & Resilience should handle Zep API failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Zep API failures gracefully"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Error Handling & Resilience"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:477:39)"],"fullName":"BMAD Phase 1 Integration Tests Error Handling & Resilience should provide fallback when memory enhancement fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide fallback when memory enhancement fails"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Performance & Scalability"],"duration":4,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at toBeDefined (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:507:41)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts:506:15)"],"fullName":"BMAD Phase 1 Integration Tests Performance & Scalability should handle concurrent analysis requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should handle concurrent analysis requests"},{"ancestorTitles":["BMAD Phase 1 Integration Tests","Performance & Scalability"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BMAD Phase 1 Integration Tests Performance & Scalability should limit memory search results appropriately","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should limit memory search results appropriately"}],"endTime":1753379741363,"message":"  ● BMAD Phase 1 Integration Tests › Memory-Enhanced Health Analysis › should generate memory-aware insights successfully\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      158 |       // Verify results\n      159 |       expect(result).toBeDefined();\n    > 160 |       expect(result.standardInsights).toBeDefined();\n          |                                       ^\n      161 |       expect(result.memoryContext).toBeDefined();\n      162 |       expect(result.personalizedInsights).toBeDefined();\n      163 |       expect(result.recommendations).toBeDefined();\n\n      at Object.toBeDefined (tests/phase1-integration.test.ts:160:39)\n\n  ● BMAD Phase 1 Integration Tests › Memory-Enhanced Health Analysis › should handle memory retrieval failures gracefully\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      194 |\n      195 |       // Should still return standard insights\n    > 196 |       expect(result.standardInsights).toBeDefined();\n          |                                       ^\n      197 |       expect(result.personalizedInsights).toBeNull();\n      198 |       expect(result.memoryContext).toBeDefined(); // Memory context is returned even if empty\n      199 |     });\n\n      at Object.toBeDefined (tests/phase1-integration.test.ts:196:39)\n\n  ● BMAD Phase 1 Integration Tests › Memory-Enhanced Health Analysis › should analyze engagement patterns correctly\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: [3, 1, 2]\n    Received: undefined\n\n      230 |       const patterns = (memoryHealthAI as any).analyzeEngagementPatterns(memories);\n      231 |\n    > 232 |       expect(patterns.preferredLayers).toEqual([3, 1, 2]); // Layer 3 has 3 entries, layers 1 and 2 have 2 each (tie broken by order)\n          |                                        ^\n      233 |       expect(patterns.averageTimeSpent).toBeCloseTo(377142.86, 2); // Average of all timeSpent values\n      234 |       expect(patterns.completionRate).toBeCloseTo(0.143, 2); // 1 completed / 7 engagement entries\n      235 |     });\n\n      at Object.toEqual (tests/phase1-integration.test.ts:232:40)\n\n  ● BMAD Phase 1 Integration Tests › Error Handling & Resilience › should provide fallback when memory enhancement fails\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      475 |       );\n      476 |\n    > 477 |       expect(result.standardInsights).toBeDefined();\n          |                                       ^\n      478 |       expect(result.personalizedInsights).toBeNull();\n      479 |       expect(result.memoryContext).toBeDefined(); // Memory context is returned even if empty\n      480 |     });\n\n      at Object.toBeDefined (tests/phase1-integration.test.ts:477:39)\n\n  ● BMAD Phase 1 Integration Tests › Performance & Scalability › should handle concurrent analysis requests\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      505 |       expect(results).toHaveLength(5);\n      506 |       results.forEach(result => {\n    > 507 |         expect(result.standardInsights).toBeDefined();\n          |                                         ^\n      508 |       });\n      509 |     });\n      510 |\n\n      at toBeDefined (tests/phase1-integration.test.ts:507:41)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/phase1-integration.test.ts:506:15)\n","name":"/home/ubuntu/biospark-health-ai/tests/phase1-integration.test.ts","startTime":1753379741064,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Context Management","getIntelligentContext"],"duration":2,"failureDetails":[{}],"failureMessages":["Error: expect(received).toHaveLength(expected)\n\nMatcher error: received value must have a length property whose value must be a number\n\nReceived has value: undefined\n    at Object.toHaveLength (/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts:54:44)"],"fullName":"Zep Context Management getIntelligentContext should retrieve comprehensive health context","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"should retrieve comprehensive health context"},{"ancestorTitles":["Zep Context Management","getIntelligentContext"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at Object.toHaveBeenCalled (/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts:78:31)"],"fullName":"Zep Context Management getIntelligentContext should handle context summarization for long content","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle context summarization for long content"},{"ancestorTitles":["Zep Context Management","updateConversationContext"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": \"What do my lab results mean?\", \"role\": \"user\"}, ObjectContaining {\"content\": \"Your results show good overall health with some areas for improvement.\", \"role\": \"assistant\"}]}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"test-session-456\", ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": \"What do my lab results mean?\", \"role\": \"user\"}, ObjectContaining {\"content\": \"Your results show good overall health with some areas for improvement.\", \"role\": \"assistant\"}]}\n\nNumber of calls: 0\n    at Object.toHaveBeenCalledWith (/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts:97:36)"],"fullName":"Zep Context Management updateConversationContext should store conversation messages successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should store conversation messages successfully"}],"endTime":1753379741646,"message":"  ● Zep Context Management › getIntelligentContext › should retrieve comprehensive health context\n\n    expect(received).toHaveLength(expected)\n\n    Matcher error: received value must have a length property whose value must be a number\n\n    Received has value: undefined\n\n      52 |       expect(result.success).toBe(true);\n      53 |       expect(result.data?.userId).toBe(mockUserId);\n    > 54 |       expect(result.data?.relevantHistory).toHaveLength(1);\n         |                                            ^\n      55 |       expect(result.data?.userPreferences.focusAreas).toContain('cardiovascular');\n      56 |       expect(result.data?.healthGoals).toContain('Improve heart health');\n      57 |     });\n\n      at Object.toHaveLength (__tests__/memory/context.test.ts:54:44)\n\n  ● Zep Context Management › getIntelligentContext › should handle context summarization for long content\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      76 |       );\n      77 |\n    > 78 |       expect(summarizeMemory).toHaveBeenCalled();\n         |                               ^\n      79 |       expect(result.data?.conversationSummary).toBe('Summarized content');\n      80 |     });\n      81 |   });\n\n      at Object.toHaveBeenCalled (__tests__/memory/context.test.ts:78:31)\n\n  ● Zep Context Management › updateConversationContext › should store conversation messages successfully\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"test-session-456\", ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": \"What do my lab results mean?\", \"role\": \"user\"}, ObjectContaining {\"content\": \"Your results show good overall health with some areas for improvement.\", \"role\": \"assistant\"}]}\n\n    Number of calls: 0\n\n       95 |\n       96 |       expect(result.success).toBe(true);\n    >  97 |       expect(zepClient.memory.add).toHaveBeenCalledWith(\n          |                                    ^\n       98 |         mockSessionId,\n       99 |         expect.objectContaining({\n      100 |           messages: expect.arrayContaining([\n\n      at Object.toHaveBeenCalledWith (__tests__/memory/context.test.ts:97:36)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/context.test.ts","startTime":1753379741380,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Zep Memory Integration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Zep API connectivity","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"Zep API connectivity"},{"ancestorTitles":["Zep Memory Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Create user session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"Create user session"},{"ancestorTitles":["Zep Memory Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Get or create user session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Get or create user session"},{"ancestorTitles":["Zep Memory Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Zep Memory Integration Store health analysis in memory","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"Store health analysis in memory"},{"ancestorTitles":["Zep Memory Integration"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"test-user-123","expected":"test_user_1753379741908","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"test_user_1753379741908\"\nReceived: \"test-user-123\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"test_user_1753379741908\"\nReceived: \"test-user-123\"\n    at Object.toBe (/home/ubuntu/biospark-health-ai/tests/zep.test.ts:82:35)"],"fullName":"Zep Memory Integration Retrieve health context from memory","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"failed","title":"Retrieve health context from memory"}],"endTime":1753379741919,"message":"  ● Zep Memory Integration › Retrieve health context from memory\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"test_user_1753379741908\"\n    Received: \"test-user-123\"\n\n      80 |       expect(result.success).toBe(true);\n      81 |       expect(result.data).toBeDefined();\n    > 82 |       expect(result.data?.userId).toBe(testUserId);\n         |                                   ^\n      83 |       expect(result.data?.sessionId).toBe(testSessionId);\n      84 |       expect(Array.isArray(result.data?.relevantHistory)).toBe(true);\n      85 |     }\n\n      at Object.toBe (tests/zep.test.ts:82:35)\n","name":"/home/ubuntu/biospark-health-ai/tests/zep.test.ts","startTime":1753379741649,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should cache and retrieve data correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache and retrieve data correctly"},{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":151,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should respect TTL and expire data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect TTL and expire data"},{"ancestorTitles":["Memory Performance & Caching","Memory Cache"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Memory Cache should implement LRU eviction when cache is full","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should implement LRU eviction when cache is full"},{"ancestorTitles":["Memory Performance & Caching","withCache wrapper"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching withCache wrapper should cache operation results","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should cache operation results"},{"ancestorTitles":["Memory Performance & Caching","withCache wrapper"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching withCache wrapper should handle operation failures gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle operation failures gracefully"},{"ancestorTitles":["Memory Performance & Caching","Performance Requirements"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Performance Requirements should meet <50ms response time requirement for cached operations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should meet <50ms response time requirement for cached operations"},{"ancestorTitles":["Memory Performance & Caching","Performance Requirements"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Performance Requirements should handle concurrent cache operations","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should handle concurrent cache operations"},{"ancestorTitles":["Memory Performance & Caching","Cache Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Memory Performance & Caching Cache Statistics should provide cache statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide cache statistics"}],"endTime":1753379742349,"message":"","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/performance.test.ts","startTime":1753379741923,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1753379742888,"message":"  ● Test suite failed to run\n\n    TypeError: (0 , _search.setZepClient) is not a function\n\n      16 |\n      17 | // Set up the mock client\n    > 18 | setZepClient(mockZepClient);\n         |             ^\n      19 |\n      20 | describe('Zep Search Operations', () => {\n      21 |   const mockUserId = 'test-user-123';\n\n      at Object.<anonymous> (__tests__/memory/search.test.ts:18:13)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/search.test.ts","startTime":1753379742888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1753379742888,"message":"  ● Test suite failed to run\n\n    TypeError: (0 , _preferences.setZepClient) is not a function\n\n      18 |\n      19 | // Set up the mock client\n    > 20 | setZepClient(mockZepClient);\n         |             ^\n      21 |\n      22 | describe('Zep Preferences Management', () => {\n      23 |   const mockUserId = 'test-user-123';\n\n      at Object.<anonymous> (__tests__/memory/preferences.test.ts:20:13)\n","name":"/home/ubuntu/biospark-health-ai/__tests__/memory/preferences.test.ts","startTime":1753379742888,"status":"failed","summary":""}],"wasInterrupted":false}
